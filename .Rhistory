length(v1)
v2 = c(15,4,8,10)
v3 = cbind(v1,v2)
v3 = c(v1,v2)
mean(v3)
v3[3]
m = cbind(v1, v2)
m2 = rbind(m2,c(8,12))
m2 = rbind(m,c(8,12))
m2[1:2,]
m2[,2]
list1 = list(c(1,3,4),"test",4)
list1[[3]]
list2 = list(c(1,3,4),"test",4)
list2 = list(a=c(1,3,4),b="test",c=4)
list2("c")
list2(c)
list2[c]
list2["c"]
list2$c
data("iris")
View(iris)
iris$Species
iris[3,]
iris[1:5,
]
v3 > 5
v3[v3>5]
iris$Petal.Width > 5
iris$Petal.Width > 5
iris$Petal.Length == 5
info()
skip()
iris[iris$Petal.Length>5,]
iris[iris$Petal.Length>5 & iris$Species=="versicolor",]
install.packages("blogdown")
library(blogdown)
?new_site
new_site()
blogdown::install_hugo()
getwd()
setwd("C:/Users/Anirudh/Desktop/Harvard PH525/Statistics and R/")
getwd()
library(dplyr)
dat <- read.csv("femaleMiceWeights.csv")
control <- filter(dat, Diet=="chow") %>% select(Bodyweight) %>% unlist
treatment <- filter(dat, Diet=="hf") %>% select(Bodyweight) %>% unlist
control
treatment
mean(treatment)
mean(control)
population <- read.csv("femaleControlsPopulation.csv")
population <- unlist(population)
mean(sample(population, 12))
mean(sample(population, 12))
mean(sample(population, 12))
mean(sample(population, 12))
mean(sample(population, 12))
mean(sample(population, 12))
mean(population)
set.seed(1)
abs(-5)
abs(mean(population) - mean(sample(population, 5)))
set.seed(5)
abs(mean(population) - mean(sample(population, 5)))
obs <- mean(treatment) - mean(control)
control <- sample(population, 12)
treatment <- sample(population, 12)
mean(treatment) - mean(control)
mean(treatment) - mean(control)
mean(treatment) - mean(control)
mean(treatment) - mean(control)
mean(treatment) - mean(control)
mean(treatment) - mean(control)
mean(treatment) - mean(control)
n <- 10000
for(i in 1:n){ set.seed(i)}
n <- 10000
nulls <- vector("numeric", n)
for(i in 1:n){ set.seed(i) control<- sample(population, 12) treatment<- sample(population, 12) nulls[i] <- mean(treatment) - mean(control)}
for(i in 1:n){ control<- sample(population, 12) treatment<- sample(population, 12) nulls[i] <- mean(treatment) - mean(control)}
for(i in 1:n){ set.seed(i) +control<- sample(population, 12) treatment<- sample(population, 12) nulls[i] <- mean(treatment) - mean(control)}
for(i in 1:n){+}
for(i in 1:n){ set.seed(i)+}
for(i in 1:n){
set.seed(i)
control <- sample(population, 12)
treatment <- sample(population, 12)
nulls[i] <- mean(treatment) - mean(control)
}
nulls
max(nulls)
hist(nulls)
sum( nulls > obs)
sum( nulls > obs) /n
mean(nulls > obs)
mean(abs(nulls) > obs)
set.seed
set.seed(1)
n = 1000
nulls <- vector("numeric", n)
for(i in 1:n){
x <- sample(population, 5)
nulls[i] <- mean(x)
}
nulls
d <- mean(population)
sum(abs(nulls - d) > 1)
498/1000
n = 10000
set.seed(1)
nulls <- vector("numeric", n)
for(i in 1:n){
x <- sample(population, 5)
nulls[i] <- mean(x)
}
d <- mean(population)
sum(abs(nulls - d) > 1)
sum(abs(nulls - d) > 1) / n
n = 1000
set.seed(1)
nulls <- vector("numeric", n)
x <- sample(population, 50)
nulls[i] <- mean(x)
for(i in 1:n){
x <- sample(population, 50)
nulls[i] <- mean(x)
}
d <- mean(population)
sum(abs(nulls - d) > 1) / n
n = 1000
set.seed(1)
nulls <- vector("numeric", n)
for(i in 1:n){
x <- sample(population, 50)
nulls[i] <- mean(x)
}
d <- mean(population)
sum(abs(nulls - d) > 1) / n
install.packages("gapminder")
library(gapminder)
data("gapminder")
data(gapminder)
head(gapminder)
View(gapminder)
select(gapminder, year=="1952")
filter(gapminder, year=="1952")
filter(gapminder, year=="1952") %>% select(lifeExp)
filter(gapminder, year=="1952") %>% select(lifeExp)
lexp <- filter(gapminder, year=="1952") %>% select(lifeExp)
hist(lexp)
class(lexp)
lexp <- filter(gapminder, year=="1952") %>% select(lifeExp) %<% unlist
lexp <- filter(gapminder, year=="1952") %>% select(lifeExp) %>% unlist
class(lexp)
hist(lexp)
mean(x <= 40)
mean(lexp)
mean(lexp <= 40)
mean(lexp <= 60) - mean(lexp <= 40)
plot(ecdf(lexp))
prop = function(q){
mean(lexp <=q )
}
prop(40)
qs = seq(min(lexp), max(lexp), length=20)
qs
props = sapply(qs, props)
props = sapply(qs, prop)
props
plot(qs, props)
props = sapply(qs, function(q) mean(lexp <= q))
plot(qs, props)
?em
?rm
rm()
rm(list=ls(all=TRUE))
x <- read.csv("femaleControlsPopulation.csv")
x <- unlist(x)
set.seed(1)
nulls <- vector("Numeric", length=n)
n <- 1000
nulls <- vector("Numeric", length=n)
nulls <- vector("numeric", length=n)
for(i in 1:n){
d <- sample(x, 5)
nulls[i] <- mean(d)
}
hist(nulls)
for(i in 1:n){
d <- sample(x, 50)
nulls[i] <- mean(d)
}
hist(nulls)
sum(nulls<25)
(sum(nulls<25) - sum(nulls<23))/1000
pnorm(25,23.9,0.43)
pnorm(25,23.9,0.43) - pnorm(23,23.9,0.43)
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/mice_pheno.csv"
filename <- basename(url)
download(url, destfile=filename)
dat <- read.csv(filename)
View(dat)
dat <- na.omit( dat )
View(dat)
x<- filter(dat, Diet=="chow") %>% select(Bodyweight) %>% unlist
mean(x)
x<- filter(dat, Diet=="chow", Sex=="M") %>% select(Bodyweight) %>% unlist
mean(x)
library(rafalib)
?popsd
popsd(x)
set.seed(1)
X <- sample(x, 25)
mean(X)
y<- filter(dat, Diet=="hf", Sex=="M") %>% select(Bodyweight) %>% unlist
mean(y)
popsd(y)
set.seed(1)
Y <- sample(y, 25)
mean(Y)
xm <- mean(x)
ym <- mean(y)
Xm <- mean(X)
Ym <- mean(Y)
abs((ym-xm) - (Ym-Xm))
xf<- filter(dat, Diet=="chow", Sex=="F") %>% select(Bodyweight) %>% unlist
set.seed(1)
Xf <- sample(xf, 25)
yf<- filter(dat, Diet=="hf", Sex=="M") %>% select(Bodyweight) %>% unlist
set.seed(1)
Yf <- sample(yf, 25)
xfm <- mean(xf)
yfm <- mean(yf)
Xfm <- mean(Xf)
Yfm <- mean(Yf)
abs((yfm-xfm) - (Yfm-Xfm))
xf<- filter(dat, Diet=="chow", Sex=="F") %>% select(Bodyweight) %>% unlist
set.seed(1)
Xf <- sample(xf, 25)
yf<- filter(dat, Diet=="hf", Sex=="F") %>% select(Bodyweight) %>% unlist
set.seed(1)
Yf <- sample(yf, 25)
xfm <- mean(xf)
yfm <- mean(yf)
Xfm <- mean(Xf)
Yfm <- mean(Yf)
abs((yfm-xfm) - (Yfm-Xfm))
y <- filter(dat, sex=="M", Diet=="chow") %>% select(Bodyweight) %>% unlist
y <- filter(dat, Sex=="M", Diet=="chow") %>% select(Bodyweight) %>% unlist
sum(abs(y-mean(y))< popsd(y))
length((y))
155/223
sum(abs(y-mean(y))< 2*popsd(y))/ length(y)
sum(abs(y-mean(y))< 3*popsd(y))/ length(y)
avgs <- replicate(10000, mean(sample(y, 25)))
mypar(1,2)
hist(avgs)
qqnorm(avgs)
qqline(avgs)
mean(avgs)
popsd(avgs)
getwd()
setwd("C:/Users/Anirudh/Desktop/Tribiani/data science with R/")
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
library(dplyr)
library(nycflights13)
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
library(dplyr)
library(nycflights13)
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
library(tidyverse)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
count(cut)
diamonds %>% count(cut)
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = carat), binwidth = 0.5)
count(cut_width(diamonds$carat, 0.5))
diamonds %>% count(cut_width(carat, 0.5))
ggplot(data = smaller, mapping = aes(x = carat)) +
geom_histogram(binwidth = 0.1)
smaller <- diamonds %>%
filter(carat < 3)
ggplot(data = smaller, mapping = aes(x = carat)) +
geom_histogram(binwidth = 0.1)
ggplot(data = smaller, mapping = aes(x = carat, colour = cut)) +
geom_freqpoly(binwidth = 0.1)
ggplot(data = smaller, mapping = aes(x = carat)) +
geom_histogram(binwidth = 0.01)
ggplot(data=faithful, mapping = aes(x = eruptions)) +
geom_histogram(binwidth = 0.25)
ggplot(diamonds) +
geom_histogram(mapping = aes(x=y), binwidth = 0.5)
ggplot(diamonds) +
geom_histogram(mapping = aes(x=y), binwidth = 0.5) +
coord_cartesian(ylim = c(0, 50))
unusual <- diamonds %>%
filter(y < 3| y > 20) %>%
select(price, x, y, z) %>%
arrange(y)
unusual
diamonds %>%
mutate(id = row_number()) %>%
select(x, y, z, id) %>%
gather(variable, value, -id) %>%
ggplot(aes(x = value)) +
geom_density() +
geom_rug() +
facet_grid(variable ~ .)
ggplot(filter(diamonds, price < 2500), aes(x = price)) +
geom_histogram(binwidth = 10, center = 0)
ggplot(filter(diamonds), aes(x = price)) +
geom_histogram(binwidth = 100, center = 0)
diamonds %>%
filter(carat >= 0.99, carat <= 1) %>%
count(carat)
ggplot(diamonds) +
geom_histogram(mapping = aes(x = price)) +
coord_cartesian(xlim = c(100,5000), ylim =c(0, 3000) )
ggplot(diamonds) +
geom_histogram(mapping = aes(x=price)) +
xlim(100, 5000) +
ylim(0, 3000)
then calculate the histogram."
then calculate the histogram."
"""coord_cartesian just zooms the plot within the given limits
fdkj
kdfj
exit
opp
erlk
count(data)
data()
diamonds2 <- diamonds %>%
filter(between(y, 3, 20))
diamonds2 <- diamonds %>%
filter(between(y, 3, 20))
diamonds2 <- diamonds %>%
mutate(y = ifelse(y < 3 | y > 20, NA, y))
ggplot(data = diamonds2, mapping = aes(x=x, y=y)) +
geom_point()
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(sched_dep_time)) +
geom_freqpoly(mapping = aes(colour = cancelled), binwidth = 1/4)
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_freqpoly(mapping = aes(colour = cut), binwidth = 500)
ggplot(diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds, mapping = aes(x = price, y = ..density..)) +
geom_freqpoly(mapping = aes(colour = cut), binwidth = 500)
ggplot(data = diamonds, mapping = aes(x=cut, y=price)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(data = mpg) +
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy))
ggplot(data = mpg) +
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy)) +
coord_flip()
ggplot(data = diamonds, mapping = aes(x = price )) +
geom_freqpoly(mapping = aes(colour = cut), binwidth = 500)
library(tidyverse)
ggplot(data = diamonds, mapping = aes(x = price )) +
geom_freqpoly(mapping = aes(colour = cut), binwidth = 500)
ggplot(diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds, mapping = aes(x = price, y = ..density..)) +
geom_freqpoly(mapping = aes(colour = cut), binwidth = 500)
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot() +
geom_boxplot(mapping = aes(y = sched_dep_time, x = cancelled))
ggplot(data = mpg) +
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy)) +
coord_flip()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_lv()
library("lvplot")
install.packages("lvplot")
library("lvplot")
ggplot(diamonds, aes(x = cut, y = price)) +
geom_lv()
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_violin() +
coord_flip()
install.packages("ggbeeswarm")
ggplot(data = mpg) +
geom_quasirandom(mapping = aes(x = reorder(class, hwy, FUN = median),
y = hwy))
library("ggbeeswarm")
ggplot(data = mpg) +
geom_quasirandom(mapping = aes(x = reorder(class, hwy, FUN = median),
y = hwy))
ggplot(data = mpg) +
geom_quasirandom(mapping = aes(x = reorder(class, hwy, FUN = median),
y = hwy),
method = "tukey")
ggplot(data = diamonds) +
geom_count(mapping = aes(x = cut, y = color))
diamonds %>%
count(color, cut)
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = n))
diamonds %>%
count(color, cut) %>%
group_by(color) %>%
mutate(prop = n/ sum(n)) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = prop)) +
scale_fill_viridis(limits = c(0,1))
diamonds %>%
count(color, cut) %>%
group_by(color) %>%
mutate(prop = n/ sum(n)) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = prop))
flights %>%
group_by(month, dest) %>%
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
ggplot(aes(x = factor(month), y = dest, fill = dep_delay)) +
geom_tile() +
labs(x = "Month", y = "Destination", fill = "Departure Delay")
ggplot::flights %>%
group_by(month, dest) %>%
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
ggplot(aes(x = factor(month), y = dest, fill = dep_delay)) +
geom_tile() +
labs(x = "Month", y = "Destination", fill = "Departure Delay")
flights %>%
group_by(month, dest) %>%
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
ggplot(aes(x = factor(month), y = dest, fill = dep_delay)) +
geom_tile() +
labs(x = "Month", y = "Destination", fill = "Departure Delay")
ggplot(data = diamonds) +
geom_point(mapping = aes(x=carat, y=price))
ggplot(data = diamonds) +
geom_point(mapping = aes(x=carat, y=price), alpha = 1/100)
ggplot(data = smaller) +
geom_bin2d(mapping = aes(x = carat, y = price))
ggplot(data=smaller) +
geom_hex(mapping = aes(x = carat, y = price))
install.packages("hexbin")
library(hexbin)
ggplot(data=smaller) +
geom_hex(mapping = aes(x = carat, y = price))
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)))
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_number(carat, 20)))
ggplot(data = diamonds,
mapping = aes(x = price,
colour = cut_width(carat, 0.3))) +
geom_freqpoly()
ggplot(diamonds, aes(x = cut_number(price, 10), y = carat)) +
geom_boxplot() +
coord_flip() +
xlab("Price")
ggplot(diamonds, aes(x = cut_width(price, 2000, boundary = 0), y = carat)) +
geom_boxplot(varwidth = TRUE) +
coord_flip() +
xlab("Price")
ggplot(diamonds, aes(x = carat, y = price)) +
geom_hex() +
facet_wrap(~ cut, ncol = 1)
ggplot(diamonds, aes(x = cut_number(carat, 5), y = price, color = cut)) +
geom_boxplot()
ggplot(diamonds, aes(color = cut_number(carat, 5), y = price, x = cut)) +
geom_boxplot()
ggplot(data = faithful) +
geom_point(mapping = aes(x = eruptions, y = waiting))
library(modelr)
mod <- lm(log(price) ~ log(carat), data = diamonds)
diamonds2 <- diamonds %>%
add_residuals(mod) %>%
mutate(resid = exp(resid))
ggplot(data = diamonds2) +
geom_point(mapping = aes(x = carat, y = resid))
ggplot(data = diamonds2) +
geom_boxplot(mapping = aes(x = cut, y = resid))
ggplot(faithful, aes(eruptions)) +
geom_freqpoly(binwidth = 0.25)
diamonds %>%
count(cut, clarity) %>%
ggplot(aes(clarity, cut, fill = n)) +
geom_tile()
library(ggplot2)
p <- ggplot(mtcars, aes(wt, mpg))
p + geom_point(size = 4, aes(colour = factor(cyl))) + scale_colour_viridis(discrete = TRUE) + theme_bw()
library(ggplot2)
?scale_colour_viridis
